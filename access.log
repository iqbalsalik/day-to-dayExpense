Environmental variables are those sensitive information which we do want our user or any other to look at. Like API Keys, Security keys etc.



	THINGS TO PREPARE THE CODE PRODUCTION READY

2)we should use Environmental variables instead of hard codeing certain values like API keys, port numbers, passwords etc.

We should change the testing API keys of third party services to production API keys.

We should reduce the error handling output details so that our users can have minimum information of our code.

Set secure response headers

Adding asset compression that will reduce the response size.(Most of the server provider gives inbuilt functionality of the compression, but if they not give it we can install the package (compression) and app.use(compression()) it)

Configure Logging to be updated about our server.

We can send secure headers to limits the user activity by intalling third party package like Helmet.(npm install helmet)

then import the package to our app.js file(const helmet  = require("helmet")) then just app.use(helmet()).



3) In production environment the hosting server provider sets the port number so if they change the port number we will have change our hard coded port number in our code as well.

In mongodb connection string if we change the password of mongodb we should change the password in our code as well. to avoid these we should put the port number and mongodb connection string in env variable.





4) process variable is a globly available object.  Process.env knows all the environmental variables.





	KEY SECURITY THINGS HELMET  PROVIDES

5)Content-Security-Policy: A powerful allow-list of what can happen on your page which mitigates many attacks
Cross-Origin-Opener-Policy: Helps process-isolate your page
Cross-Origin-Resource-Policy: Blocks others from loading your resources cross-origin


	MORGAN STORES THE COSOLE.LOGS OF THE SERVER TO THE FILE WE DEFINE

6) Install the morgan extension with npm i morgan, then import the morgan to app.js file.

create a filepath to which we want to store all the logs by 

const fileStream = fs.createWriteStream(path.join(__dirname,"access.log"),{ flag:"a"});

access.log is the file name to which we want to store all the logs, flag:"a" means we want to append all the logs to the file not overwrite the previous one.



 Then just app.use(morgan("combined",{stream:fileName})